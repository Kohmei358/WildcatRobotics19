#include "robot-config.h"

bool side; //true for left, false for right
bool pass; //used for getting out of while loop
int target;

//here are some functions for basic movement
void moveForward(int power, int time){
	UpLeft.spin(directionType::fwd, power, pct);
	UpRight.spin(directionType::fwd, power, pct);
	DownLeft.spin(directionType::fwd, power, pct);
	DownRight.spin(directionType::fwd, power, pct);

	vex::task::sleep(time);
}

void turn(int degrees){
	//positive degrees = turn left, negitive degrees = turn right
    UpLeft.rotateTo(degrees, deg);
    UpRight.rotateTo(degrees, deg);
    DownLeft.rotateTo(degrees, deg);
    DownRight.rotateTo(degrees, deg);
}

void liftFlipper(bool up){
	//if true, lift flipper up, if false, move it down
	if(up){
	CapLiftMotor.spin(fwd,75,pct);
	vex::task::sleep(1000);
	}

	else{
		CapLiftMotor.spin(directionType::rev,75,pct);
		vex::task::sleep(1000);
	}
}

void flipCap(){
	CapFlipperMotor.rotateTo(360, deg);
}

void launch(){
	LauncherMotor.rotateTo(360, deg);
}

//below there will be the possible autonomous functions,

void flipCapLaunchLeft(){

	//none of the times are final
	//there will be a parameter to determine how close the robot should get to the target, to choose wihch target to launch the ball

	//turn to the wall
	turn(180);
	//move to the wall
	moveForward(75, 1000);
	//turn to the cap
	turn(-180);
	//move to the cap
	moveForward(75, 1000);
	//flip the cap
	flipCap();
	//leave the cap
	moveForward(-75, 1000);
	//turn to the targets
	turn(-180);
	//move to the targets, depending on which target is bieng aimed for

	if(target == 1){
		moveForward(75, 500);
	}
	else if(target == 2){
		moveForward(75, 750);
	}
	else{ //aim for bottom target
		moveForward(75, 1000);
	}

	//launch the ball
	launch();

	//end program
}

void launchFlipCapRight(){
	//move forward
	moveForward(75, 1000);
	//turn to the target
	turn(-180);

	//move to the target depending on which on is being targeted
	if(target == 1){
		moveForward(75, 500);
	}
	else if(target == 2){
		moveForward(75, 750);
	}
	else{ //aim for bottom target
		moveForward(75, 1000);
	}

	//launch the ball at targe
	launch();

	//move to the wall
	moveForward(75, 1000);

	//turn to the cap
	turn(180);

	//move to the cap
	moveForward(75, 1000);

	//filp the cap
	flipCap();

	//leave the cap
	moveForward(-75, 1000);

	//turn to the parking zone
	turn(180);

	//move to the parking zone
	moveForward(75, 1000);
}




int main() {

  if(side){
    //left side
    flipCapLaunchLeft();
  }
  else{
    //right side
    launchFlipCapRight();
  }

}


void pre_auton(){
	//here is where the autonomous program can be selected
	//first, choose between right or left

	//resolution = 480x272

	Brain.Screen.setOrigin(0,0);

	int xPos;
    int yPos;

    Brain.Screen.printAt(25, 25, "Which side is the robot starting on?");

    //left
    Brain.Screen.drawRectangle(50, 50, 125, 125);
    Brain.Screen.printAt(100,100, "Left");

    //right
    Brain.Screen.drawRectangle(200, 50, 125, 125);
    Brain.Screen.printAt(250, 100, "Right");

    while(pass){
    	xPos = Brain.Screen.xPosition();
        yPos = Brain.Screen.yPosition();

   		if((xPos > 25 && xPos < 200) && (yPos > 50 && yPos < 225)){
   			side = true;
        //get out of while loop
   			pass = false;
    	}
    	else if((xPos > 225 && xPos < 455) && (yPos > 50 && yPos < 255 )){
    		side = false;
    		pass = false;
    	}
    }

    Brain.Screen.clearScreen();

    vex::task::sleep(1000);

    Brain.Screen.printAt(25,25, "Which target is the robot aiming for?");

    Brain.Screen.drawRectangle(50, 75, 100, 175);
    Brain.Screen.drawRectangle(175, 75, 100, 175);
    Brain.Screen.drawRectangle(300, 75, 100, 175  );

    pass = true;


    while(pass){
    	xPos = Brain.Screen.xPosition();
      yPos = Brain.Screen.yPosition();
        //print text
      Brain.Screen.printAt(75, 125, "Top Target");
      Brain.Screen.printAt(200, 125, "Middle Target");
      Brain.Screen.printAt(325, 125, "Low Target");

   		if((xPos > 50 && xPos < 150) && (yPos > 75 && yPos < 250)){
        target = 1;
        //get out of while loop
   			pass = false;
    	}
    	else if((xPos > 175 && xPos < 275) && (yPos > 75 && yPos < 250)){
    		target = 2;
    		pass = false;
    	}
      else if((xPos > 300 && xPos < 400) && (yPos > 75 && yPos < 250 )){
    		target = 3;
    		pass = false;
    	}
    }

    Brain.Screen.clearScreen();

    if(side){
      if(target == 1){
        Brain.Screen.printAt(100, 125, "Starting position: Left, Target: Top");
      }
      if(target == 2){
        Brain.Screen.printAt(100, 125, "Starting position: Left, Target: Middle");
      }
      if(target == 3){
        Brain.Screen.printAt(100, 125, "Starting position: Left, Target: Bottom");
      }
    }
    else if(!side){
      if(target == 1){
        Brain.Screen.printAt(100, 125, "Starting position: Right, Target: Top");
      }
      if(target == 2){
        Brain.Screen.printAt(100, 125, " Starting position: Right, Target: Middle");
      }
      if(target == 3){
        Brain.Screen.printAt(100, 125, " Starting position: Right, Target: Bottom");
      }
    }
}
